env=online
app.name=jilu

# captcha configuration
captcha.digit=4
captcha.life.time=60000
captcha.count.maximum=10
captcha.count.lift.time=21600000

# aliyun sts configuration
aliyun.sts.region=cn-hangzhou
aliyun.sts.role.arn=acs:ram::1480156965747504:role/jilu-test
aliyun.sts.edition=2015-04-01
aliyun.sts.access.key.id=LTAIo4fLHAMwbjzw
aliyun.sts.access.key.secret=CQtwhhzjtOMsJkzVsilm3AV5Zyh4C2

# aliyun oss configuration
aliyun.oss.bucket=jilu-test
aliyun.oss.folder.prefix=http://jilu-test.oss-cn-shanghai.aliyuncs.com
aliyun.oss.endpoint=http://oss-cn-shanghai.aliyuncs.com/
aliyun.oss.access.key.id=LTAIx81L9s0GzPtA
aliyun.oss.access.key.secret=1CeO2BG6ackYKosN5efi8bjR7JgUsr

# language
locale=zh_cn

# logback configuration
logback.scan=false
logback.scan.period=5 seconds
logback.debug=false
logback.path=E:/data/logs/Iris/jilu
logback.root.level=info
logback.Iris.additivity=false
logback.Iris.level=info
logback.console.open=false

# activemq configuration
activemq.broker.url=failover:(tcp://121.42.155.96:61616)
activemq.useAsyncSend=true
activemq.username=admin
activemq.password=admin
activemq.max.conn=100

# zookeeper configuration
zookeeper.servers=121.42.155.96:2181
zookeeper.session.timeout=5000
zookeeper.connection.timeout=5000

# db configuration
hikaricp.driver.class=com.mysql.cj.jdbc.Driver
hikaricp.jdbc=jdbc:mysql://121.42.155.96:3306/jilu?allowMultiQueries=true&amp;useUnicode=true&amp;autoReconnect=true&amp;failOverReadOnly=false&amp;characterEncoding=UTF-8&amp;connectTimeout=3000&amp;socketTimeout=60000
hikaricp.username=root
hikaricp.password=zxl870613
hikaricp.max.pool.size=15
hikaricp.min.idle=5
hikaricp.max.life.time=21600000
hikaricp.idle.timeout=600000
hikaricp.connection.timeout=10000
hikaricp.datasource.prestmt.cache=true
hikaricp.datasource.prestmt.cache.size=250
hikaricp.datasource.prestmt.cache.sql.limit=2048

# redis configuration
redis.host=121.42.155.96
redis.port=6000
redis.password=<null/>
redis.lifo=false
redis.lock.timeout=3000
redis.max.idle=12
redis.min.idle=4
redis.max.total=12
redis.test.on.borrow=true
redis.max.wait.millis=3000
redis.test.while.idle=false
redis.conn.timeout.millis=2000
redis.block.when.exhausted=true
redis.num.tests.per.eviction.run=-1
redis.min.evictable.idle.time.millis=-1
redis.time.between.eviction.runs.millis=30000
redis.soft.min.evictable.idle.time.millis=60000

# igt configuration
igt.appId=c5VCMF5JOK8gSqD6tbXYe1
igt.appSecret=ZX2KEFA5G39nK6gWPfa3L7
igt.appKey=uHtRPpbwtP9nFhPFb3iG53
igt.masterSecret=lDqk89YoFX5ytzaQeyE9l7
igt.url=http://sdk.open.api.igexin.com/apiex.htm

# ===================================================== notice =====================================================

# 1、redis.time.between.eviction.runs.millis 和 redis.num.test.per.eviction.run 一起决定了对象回收的开关。
#    redis.time.between.eviction.runs.millis 表示每隔多少毫秒进行一次 idle object 扫描检查，如果 <=0 则表示不开启扫描检查
#    redis.num.test.per.eviction.run 表示每次进行扫描时最多扫描多少个 idle object 对象，如果为 0 也不会开启扫描检查，如果
#                                      为负数则每次扫描 Math.ceil(池中总对象数/Math.abs(值))，因此 -1 表示扫描所有 idle object
# 2、redis.max.total、redis.block.when.exhausted、redis.max.wait.millis 一起决定了 getSource 的行为。
#    redis.max.total 表示对象池中所有对象最大个数限制(空闲对象 + 使用对象)。每次调用 getResource 会先判断是否有空闲对象，如果
#    有则返回空闲对象，如果没有并且总对象数 < 该值则立即新建一个对象返回，如果总对象数 = 该值则 当 redis.block.when.exhausted为  
#    false 时立即抛出异常，如果 redis.block.when.exhausted 为 true 则会阻塞 redis.max.wait.millis 毫秒超时或者在该时间内有空闲对象可用
# 3、redis.max.idle 决定了池中空闲对象的最大数目。
#    如果当前池中空闲对象数已经达到该值，那么后续 return 回池中的对象立即被回收 destroy 而不受 idle object 回收机制的影响
# 4、redis.min.idle 决定了池中空闲对象的最少数目。
#    一旦池中空闲对象数少于该值，就会立即创建一个新的对象，但是要受 redis.max.total 的限制
# 5、redis.min.evitable.idle.millis 表示每个空闲对象
#    仅仅在开启扫描机制时该设置才有效，也就是说 redis.time.between.eviction.runs.millis > 0，redis.num.test.per.eviction.run != 0。
#    在扫描机制开启的情况下，如果一个对象的空闲时间超过该值就会被收回，而不受 redis.min.idle、redis.max.idle 等对象个数参数限制的影响
#    如果该值 <=0 则表示对象永远不会因空闲而回收(但是超过 maxIdle 时会立即回收)，因此如果该值 <= 0 一般空闲对象个数就永久保持在 maxIdle 个
# 6、redis.soft.min.evictable.idle.time.millis 和 redis.min.evitable.idle.millis 相似，唯一的区别在于受 redis.min.idle 的影响
#    仅仅在开启扫描机制时该设置才有效，也就是说 redis.time.between.eviction.runs.millis > 0，redis.num.test.per.eviction.run != 0。
#    在 minIdle 和 maxIdle 之间的空闲对象，当空闲时间超过该值时会被回收，直到池中空闲对象个数 <= minIdle 位置。也就是说该值确保池中空闲
#    对象的个数至少是 minIdle。
#    该值的优先级低于 redis.min.evitable.idle.millis，首先任何对象的空闲回收要受 redis.min.evitable.idle.millis 的影响，其次才会受该值的影响
#    因此如果我们设置 redis.min.evitable.idle.millis <= 0，设置该值 5000，则池中空闲对象个数少于 minIdle 时，这些 minIdle 的对象就永远不会被回收了
#    但是如果我们设置了 redis.min.evitable.idle.millis = 6000，设置该值为 5000，则池中空闲对象数少于 minIdle 时这些 minIdle 对象的空闲时间如果
#    超过了 6000 millis 一样要被回收，然后创建新的空闲对象(要注意这种情况，会导致频繁的对象销毁创建)。
# 7、redis.conn.timeout.millis 表示每次建立 redis 连接的超时时间，在规定时间内连接没有建立成功则抛出 ConnectException，默认 2000 毫秒
# 8、reids.port、redis.host、redis.password 三个参数作为连接 redis 的基本配置，其中 redis.port 默认为 6379；redis.host 是必须的；如果 redis 没
#    有设置密码，则不需要 redis.password 否则需要指定 redis 密码。
